#+title: 01 - elisp syntax
#+creator: mal1kc


i suggest to read original manual from gnu.org 'https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html'


* nil and t

nil:
- ()   ->empty list
- bool -> false
- symbol with name nil

t:
- bool true


#+BEGIN_SRC emacs-lisp
( nil)

#+END_SRC

* printing notation

#+begin_src  emacs-lisp

(progn (prin1 'foo) (princ "\n") (prin1 'bar))
(prin1 (+ 5 6))
(princ ",")
(prin1 (+ (+ 1 2) (- (+ 4 2) 2)))
(prin1 (+ (+ 1 2) (- (+ 2 5) 12)))
#+end_src

#+RESULTS:
: -2

* data types

#+begin_src emacs-lisp
;; int type
1
-1
1.
-1.
;; float type
1.2
0.1
.1
-0.1
1500.0
+15e2           ; equals 1500.0
+1500000e-3     ; equals 1500.0
.15e5           ; equals 1500.0
;; character type
?Q
?\a
?\^?
?\M-\120 ; M-x
;; cons cell and list types (directly yanked from manual)
'(A 2 "A")            ; A list of three elements.
'()                   ; A list of no elements (the empty list).
'nil                  ; A list of no elements (the empty list).
'("A ()")             ; A list of one element: the string "A ()".
'(A ())               ; A list of two elements: A and the empty list.
'(A nil)              ; Equivalent to the previous.
'((A B C))            ; A list of one element
                      ;   (which is a list of three elements).
#+end_src

#+RESULTS:
| A | B | C |

* variables

#+begin_src emacs-lisp :results :output-dir .
(setq _x 1)
(+ _x 5)
; now _one is global variable
(let ((_x 4)) ;local variable
  (setq _x 6) ; local binding of _x is set
  _x)
_x ;; global variable not changed



;(set one 1)
;;errorâ†’ Symbol's value as variable is void: one

(set 'one 1)

(set 'two 'one)

(set two 2)         ; two evaluates to symbol one.

one                 ; So it is one that was set.
(let ((one 1))      ; This binding of one is set,
  (set 'one 3)      ;   not the global value.
  one)

one
#+end_src

#+RESULTS:
: 2

* functions

function call syntax is like:

#+begin_example
(function_name arg1 arg2)
(+ 1 2)
(prin1 1)

#+end_example

#+begin_src emacs-lisp

(prin1 5)
(print (prin1 6))

#+end_src

#+RESULTS:
: 1

function definition

#+begin_example
(defun my_func ()
   func_body)
#+end_example
#+begin_src emacs-lisp
(defun my_func()
  (message "hello"))

(my_func)
#+end_src

#+RESULTS:
: hello

if you type interactive in any function it will show up in M-x

#+begin_example
(defun my_func()
    (interactive)
    (message "hello"))

(my_func)
#+end_example

#+begin_src emacs-lisp
(defun my_func()
    (interactive)
    (message "hello"))

(my_func)
#+end_src

define function with args
#+begin_example
(defun func_name(arg_name))
    ...
   (some other func arg_name)
   ...
    )

(my-name "giovani giorgio")
#+end_example

#+begin_src emacs-lisp
(defun say-hi(name)
    (format "hi %s" name)
    )

(say-hi "giovani giorgio")


#+end_src

#+begin_src emacs-lisp
(defun org-mode-src (lang)
  "create src area in org-mode with specified LANG."
  (interactive "swhat language source you write to ?:  ")
       (insert (format "#+begin_src %s\n\n#+end_src" lang)))
#+end_src

#+RESULTS:
: org-mode-src

* some interesting funcs
#+begin_src emacs-lisp
(message "hello") ; give user a message ( it will show up in boot info label )
#+end_src

#+RESULTS:
: hello

#+begin_src emacs-lisp
;;(insert "hello") ; it will insert text into where cursor is
(defun org-mode-src()(interactive)
       (insert "#+begin_src\n\n#+end_src"))
#+end_src

#+RESULTS:
: org-mode-src

#+begin_src emacs-lisp
(append '(1) '(2 3 4) nil) ; Concatenate all the arguments and make the result a list.
#+end_src
#+RESULTS:
| 1 | 2 | 3 | 4 |

#+begin_src emacs-lisp
(format "%s %d %d" "hi" 10 1)
#+end_src

#+RESULTS:
: hi 10 1

#+begin_src emacs-lisp
(cdr '(21 1 3)) ; it deletes first element and returns list of others
#+end_src

#+RESULTS:
| 1 | 3 |


#+begin_src elisp
(concat "giovani " "giorgio")
(setq fullname (concat "giovani " "giorgio"))
(message fullname)
#+end_src

#+RESULTS:
: giovani giorgio
